# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['old_md_dir', 'old_cc_dir', 'conn_db']

# %% ../nbs/00_core.ipynb 2
import sqlalchemy

from fastcore.utils import *
from fastcore.net import urlsave

from collections import namedtuple
from sqlalchemy import create_engine,text,MetaData,Table,Column,engine,sql
from sqlalchemy.sql.base import ReadOnlyColumnCollection
from sqlalchemy.engine.base import Connection
from sqlalchemy.engine.cursor import CursorResult

# %% ../nbs/00_core.ipynb 5
def conn_db(connstr, **kwargs):
    "Connect to DB using `url.URL()` params and return filled `MetaData`"
    eng = create_engine(connstr, **kwargs)
    conn = eng.connect()
    meta = MetaData()
    meta.reflect(bind=eng)
    meta.bind = eng
    meta.conn = conn
    return meta

# %% ../nbs/00_core.ipynb 7
old_md_dir = MetaData.__dir__
old_cc_dir = ReadOnlyColumnCollection.__dir__

@patch
def __dir__(self:MetaData): return old_md_dir(self) + list(self.tables)

@patch
def __dir__(self:ReadOnlyColumnCollection): return old_cc_dir(self) + self.keys()

def _getattr_(self, n):
    if n[0]=='_': raise AttributeError
    if n in self.tables: return self.tables[n]
    #return super().__getattr__(n)
    raise AttributeError
MetaData.__getattr__ = _getattr_

# %% ../nbs/00_core.ipynb 11
@patch
def tuples(self:CursorResult, nm='Row'):
    "Get all results as named tuples"
    rs = self.mappings().fetchall()
    nt = namedtuple(nm, self.keys())
    return [nt(**o) for o in rs]

@patch
def sql(self:Connection, statement, nm='Row', *args, **kwargs):
    "Execute `statement` string and return results (if any)"
    if isinstance(statement,str): statement=text(statement)
    t = self.execute(statement)
    return t.tuples()

@patch
def sql(self:MetaData, statement, *args, **kwargs):
    "Execute `statement` string and return `DataFrame` of results (if any)"
    return self.conn.sql(statement, *args, **kwargs)

# %% ../nbs/00_core.ipynb 13
@patch
def get(self:Table, where=None, limit=None):
    "Select from table, optionally limited by `where` and `limit` clauses"
    return self.metadata.conn.sql(self.select().where(where).limit(limit))

# %% ../nbs/00_core.ipynb 17
@patch
def close(self:MetaData):
    "Close the connection"
    self.conn.close()
